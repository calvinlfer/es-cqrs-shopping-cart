akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 60 seconds

  actor {
    provider = cluster
    enable-additional-serialization-bindings = on
    serializers {
      proto-event = "com.experiments.shopping.cart.serializers.ShoppingCartEventSerializer"
    }
  }

  persistence {
    journal.plugin = "cassandra-journal"
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      # bind-hostname = 0.0.0.0
      # bind-port = 2553
      hostname = ${?HOST_IP}
      port = ${?HOST_PORT}
    }
  }

  cluster {
    roles = ["query", "query-vendor-billing-jdbc"]
    downing-provider-class = "com.experiments.sbr.RoleBasedSplitBrainResolverProvider"
    split-brain-resolver {
      stable-after = 10 seconds
      essential-roles = []
    }
    # only command nodes run cluster sharded entities
    sharding {
      role = "command"
    }
    singleton {
      singleton-name = "vendor-billing-query-jdbc-singleton"
      # only query-vendor-billing-jdbc nodes may run this Singleton actor
      role = "query-vendor-billing-jdbc"
    }
  }

  extensions = [de.heikoseeberger.constructr.ConstructrExtension, akka.cluster.pubsub.DistributedPubSub]
}

cassandra-journal {
  keyspace = ${cassandra.keyspace}
  table = "cart_events"
  table = ${?EVENTS_TABLE}
  contact-points = [${cassandra.uri}]
  ssl.truststore.path = ${cassandra.truststore-path}
  ssl.truststore.password = ${cassandra.truststore-password}
  authentication.username = ${cassandra.username}
  authentication.password = ${cassandra.password}
  # tables are auto-created (this can be changed)
  keyspace-autocreate = ${cassandra.initialize-keyspace}

  # Enable Distributed Publish-Subscribe notifications for quicker communication to the Query side
  pubsub-notification = on
}

cassandra {
  host = "localhost"
  host = ${?CASSANDRA_HOST}
  port = 9042
  port = ${?CASSANDRA_PORT}
  uri = ${cassandra.host}":"${cassandra.port}
  keyspace = "shopping_cart"
  keyspace = ${?APPLICATION_KEYSPACE}
  truststore-path = ""
  truststore-path = ${?TRUSTSTORE_TARGET_PATH}
  truststore-password = ""
  truststore-password = ${?TRUSTSTORE_PASSWORD}
  username = ""
  username = ${?CASSANDRA_USER}
  password = ""
  password = ${?CASSANDRA_PASSWORD}
  # used to tell Akka Persistence to automatically create the keyspace if it's not there already
  initialize-keyspace = true
  initialize-keyspace = ${?CASSANDRA_INITIALIZE_KEYSPACE}
}

zookeeper {
  # You can specify more than one URI using commas
  # For example: "10.10.10.10:2181,10.10.10.11:2181,10.10.10.12:2181"
  uris = "localhost:2181"
  uris = ${?ZOOKEEPER_URIS}
}

constructr {
  coordination.nodes = ${zookeeper.uris}
  ignore-refresh-failures = true
}

database {
  host = "127.0.0.1"
  host = ${?DATABASE_HOST}

  port = 5432
  port = ${?DATABASE_PORT}

  database-name = "calvin"
  database-name = ${?DATABASE_NAME}

  schema-name = "shopping_cart"
  schema-name = ${?SCHEMA_NAME}

  user = "docker"
  user = ${?DATABASE_USER}

  password = "docker"
  password = ${?DATABASE_PASSWORD}

  vendor-query-table-name = "vendor_billing"
  offset-tracking-table-name = "offset_tracking"
}

db {
  url = "jdbc:postgresql://"${database.host}":"${database.port}/${database.database-name}
  driver = "org.postgresql.Driver"
  user = ${database.user}
  password = ${database.password}
}

app {
  query-supervision {
    min-backoff-duration = 10 seconds
    max-backoff-duration = 1 minute
    noise = 0.1
  }
}